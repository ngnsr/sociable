name: Build and Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Substitute github secrets
        run: |
          sed -i 's/<DB_USER>/${{ secrets.DB_USER }}/' src/main/resources/application.yml
          sed -i 's/<DB_USER>/${{ secrets.DB_USER }}/' compose.yml
          sed -i 's/<DB_PASSWORD>/${{ secrets.DB_PASSWORD }}/' src/main/resources/application.yml
          sed -i 's/<DB_PASSWORD>/${{ secrets.DB_PASSWORD }}/' compose.yml
          sed -i 's/<DB_PASSWORD>/${{ secrets.DB_ADMIN_PASSWORD }}/' compose.yml
          sed -i 's/<GOOGLE_CLIENT_ID>/${{ secrets.GOOGLE_CLIENT_ID }}/' src/main/resources/application.yml
          sed -i 's/<GOOGLE_CLIENT_SECRET>/${{ secrets.GOOGLE_CLIENT_SECRET }}/' src/main/resources/application.yml
          
          sed -i 's/<DOCKER_HUB_USERNAME>/${{ secrets.DOCKER_HUB_USERNAME }}/' compose.yml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Docker image
        run: |
          docker compose build -t ${{ secrets.DOCKER_HUB_USERNAME }}/sociable-app:latest .
          docker compose push ${{ secrets.DOCKER_HUB_USERNAME }}/sociable-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SSH to EC2 instance and Deploy Docker Container
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            docker compose pull ${{ secrets.DOCKER_HUB_USERNAME }}/sociable-app:latest

            docker compose up --detach
            docker image prune